type Mutation {
  acceptTeamInvite(
    invite_id: uuid!
  ): SuccessOutput
}

type Mutation {
  callForOrganizer(
    matchId: String!
  ): SuccessOutput
}

type Mutation {
  cancelMatch(
    match_id: uuid!
  ): SuccessOutput
}

type Mutation {
  checkIntoMatch(
    match_id: uuid!
  ): SuccessOutput
}

type Mutation {
  forfeitMatch(
    match_id: uuid!
    winning_lineup_id: uuid!
  ): SuccessOutput
}

type Query {
  me: MeResponse!
}

type Mutation {
  scheduleMatch(
    match_id: uuid!
    time: timestamptz
  ): SuccessOutput
}

type Mutation {
  setMatchWinner(
    match_id: uuid!
    winning_lineup_id: uuid!
  ): SuccessOutput
}

type Mutation {
  setupGameServer: SetupGameServeOutput
}

type Mutation {
  startMatch(
    match_id: uuid!
    server_id: uuid
  ): SuccessOutput
}

type Mutation {
  updateCs(
    gameServerNodeId: uuid
  ): SuccessOutput
}

input SampleInput {
  username: String!
  password: String!
}

type MeResponse {
  name: String!
  country: String
  steam_id: String!
  avatar_url: String!
  profile_url: String
  discord_id: String
  role: String!
}

type SuccessOutput {
  success: Boolean!
}

type SetupGameServeOutput {
  link: String!
}

type SampleOutput {
  accessToken: String!
}

